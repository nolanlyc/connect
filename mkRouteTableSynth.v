//
// Generated by Bluespec Compiler, version 2025.01.1-9-g76db531e (build 76db531e)
//
// On Thu Jul 31 18:29:10 PDT 2025
//
//
// Ports:
// Name                         I/O  size props
// r_0_sub                        O     3
// RDY_r_0_sub                    O     1 const
// r_1_sub                        O     3
// RDY_r_1_sub                    O     1 const
// r_2_sub                        O     3
// RDY_r_2_sub                    O     1 const
// r_3_sub                        O     3
// RDY_r_3_sub                    O     1 const
// r_4_sub                        O     3
// RDY_r_4_sub                    O     1 const
// RDY_w_0_upd                    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// r_0_sub_a                      I     4
// r_1_sub_a                      I     4
// r_2_sub_a                      I     4
// r_3_sub_a                      I     4
// r_4_sub_a                      I     4
// w_0_upd_a                      I     4
// w_0_upd_d                      I     3
// EN_w_0_upd                     I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRouteTableSynth(CLK,
			 RST_N,

			 r_0_sub_a,
			 r_0_sub,
			 RDY_r_0_sub,

			 r_1_sub_a,
			 r_1_sub,
			 RDY_r_1_sub,

			 r_2_sub_a,
			 r_2_sub,
			 RDY_r_2_sub,

			 r_3_sub_a,
			 r_3_sub,
			 RDY_r_3_sub,

			 r_4_sub_a,
			 r_4_sub,
			 RDY_r_4_sub,

			 w_0_upd_a,
			 w_0_upd_d,
			 EN_w_0_upd,
			 RDY_w_0_upd);
  input  CLK;
  input  RST_N;

  // value method r_0_sub
  input  [3 : 0] r_0_sub_a;
  output [2 : 0] r_0_sub;
  output RDY_r_0_sub;

  // value method r_1_sub
  input  [3 : 0] r_1_sub_a;
  output [2 : 0] r_1_sub;
  output RDY_r_1_sub;

  // value method r_2_sub
  input  [3 : 0] r_2_sub_a;
  output [2 : 0] r_2_sub;
  output RDY_r_2_sub;

  // value method r_3_sub
  input  [3 : 0] r_3_sub_a;
  output [2 : 0] r_3_sub;
  output RDY_r_3_sub;

  // value method r_4_sub
  input  [3 : 0] r_4_sub_a;
  output [2 : 0] r_4_sub;
  output RDY_r_4_sub;

  // action method w_0_upd
  input  [3 : 0] w_0_upd_a;
  input  [2 : 0] w_0_upd_d;
  input  EN_w_0_upd;
  output RDY_w_0_upd;

  // signals for module outputs
  wire [2 : 0] r_0_sub, r_1_sub, r_2_sub, r_3_sub, r_4_sub;
  wire RDY_r_0_sub,
       RDY_r_1_sub,
       RDY_r_2_sub,
       RDY_r_3_sub,
       RDY_r_4_sub,
       RDY_w_0_upd;

  // ports of submodule rt_ifc_banks_0_banks_0_rf
  wire [3 : 0] rt_ifc_banks_0_banks_0_rf$ADDR_1,
	       rt_ifc_banks_0_banks_0_rf$ADDR_IN;
  wire [2 : 0] rt_ifc_banks_0_banks_0_rf$D_IN,
	       rt_ifc_banks_0_banks_0_rf$D_OUT_1;
  wire rt_ifc_banks_0_banks_0_rf$WE;

  // ports of submodule rt_ifc_banks_0_banks_1_rf
  wire [3 : 0] rt_ifc_banks_0_banks_1_rf$ADDR_1,
	       rt_ifc_banks_0_banks_1_rf$ADDR_IN;
  wire [2 : 0] rt_ifc_banks_0_banks_1_rf$D_IN,
	       rt_ifc_banks_0_banks_1_rf$D_OUT_1;
  wire rt_ifc_banks_0_banks_1_rf$WE;

  // ports of submodule rt_ifc_banks_0_banks_2_rf
  wire [3 : 0] rt_ifc_banks_0_banks_2_rf$ADDR_1,
	       rt_ifc_banks_0_banks_2_rf$ADDR_IN;
  wire [2 : 0] rt_ifc_banks_0_banks_2_rf$D_IN,
	       rt_ifc_banks_0_banks_2_rf$D_OUT_1;
  wire rt_ifc_banks_0_banks_2_rf$WE;

  // ports of submodule rt_ifc_banks_0_banks_3_rf
  wire [3 : 0] rt_ifc_banks_0_banks_3_rf$ADDR_1,
	       rt_ifc_banks_0_banks_3_rf$ADDR_IN;
  wire [2 : 0] rt_ifc_banks_0_banks_3_rf$D_IN,
	       rt_ifc_banks_0_banks_3_rf$D_OUT_1;
  wire rt_ifc_banks_0_banks_3_rf$WE;

  // ports of submodule rt_ifc_banks_0_banks_4_rf
  wire [3 : 0] rt_ifc_banks_0_banks_4_rf$ADDR_1,
	       rt_ifc_banks_0_banks_4_rf$ADDR_IN;
  wire [2 : 0] rt_ifc_banks_0_banks_4_rf$D_IN,
	       rt_ifc_banks_0_banks_4_rf$D_OUT_1;
  wire rt_ifc_banks_0_banks_4_rf$WE;

  // value method r_0_sub
  assign r_0_sub = rt_ifc_banks_0_banks_0_rf$D_OUT_1 ;
  assign RDY_r_0_sub = 1'd1 ;

  // value method r_1_sub
  assign r_1_sub = rt_ifc_banks_0_banks_1_rf$D_OUT_1 ;
  assign RDY_r_1_sub = 1'd1 ;

  // value method r_2_sub
  assign r_2_sub = rt_ifc_banks_0_banks_2_rf$D_OUT_1 ;
  assign RDY_r_2_sub = 1'd1 ;

  // value method r_3_sub
  assign r_3_sub = rt_ifc_banks_0_banks_3_rf$D_OUT_1 ;
  assign RDY_r_3_sub = 1'd1 ;

  // value method r_4_sub
  assign r_4_sub = rt_ifc_banks_0_banks_4_rf$D_OUT_1 ;
  assign RDY_r_4_sub = 1'd1 ;

  // action method w_0_upd
  assign RDY_w_0_upd = 1'd1 ;

  // submodule rt_ifc_banks_0_banks_0_rf
  RegFileLoadSyn #( /*file*/ "mesh_16RTs_2VCs_4BD_256DW_SepIFRoundRobinAlloc_4RTsPerRow_4RTsPerCol_routing_0.hex",
		    /*addr_width*/ 32'd4,
		    /*data_width*/ 32'd3,
		    /*lo*/ 32'd0,
		    /*hi*/ 32'd15,
		    /*binary*/ 32'd0) rt_ifc_banks_0_banks_0_rf(.CLK(CLK),
								.RST_N(RST_N),
								.ADDR_1(rt_ifc_banks_0_banks_0_rf$ADDR_1),
								.ADDR_IN(rt_ifc_banks_0_banks_0_rf$ADDR_IN),
								.D_IN(rt_ifc_banks_0_banks_0_rf$D_IN),
								.WE(rt_ifc_banks_0_banks_0_rf$WE),
								.D_OUT_1(rt_ifc_banks_0_banks_0_rf$D_OUT_1));

  // submodule rt_ifc_banks_0_banks_1_rf
  RegFileLoadSyn #( /*file*/ "mesh_16RTs_2VCs_4BD_256DW_SepIFRoundRobinAlloc_4RTsPerRow_4RTsPerCol_routing_0.hex",
		    /*addr_width*/ 32'd4,
		    /*data_width*/ 32'd3,
		    /*lo*/ 32'd0,
		    /*hi*/ 32'd15,
		    /*binary*/ 32'd0) rt_ifc_banks_0_banks_1_rf(.CLK(CLK),
								.RST_N(RST_N),
								.ADDR_1(rt_ifc_banks_0_banks_1_rf$ADDR_1),
								.ADDR_IN(rt_ifc_banks_0_banks_1_rf$ADDR_IN),
								.D_IN(rt_ifc_banks_0_banks_1_rf$D_IN),
								.WE(rt_ifc_banks_0_banks_1_rf$WE),
								.D_OUT_1(rt_ifc_banks_0_banks_1_rf$D_OUT_1));

  // submodule rt_ifc_banks_0_banks_2_rf
  RegFileLoadSyn #( /*file*/ "mesh_16RTs_2VCs_4BD_256DW_SepIFRoundRobinAlloc_4RTsPerRow_4RTsPerCol_routing_0.hex",
		    /*addr_width*/ 32'd4,
		    /*data_width*/ 32'd3,
		    /*lo*/ 32'd0,
		    /*hi*/ 32'd15,
		    /*binary*/ 32'd0) rt_ifc_banks_0_banks_2_rf(.CLK(CLK),
								.RST_N(RST_N),
								.ADDR_1(rt_ifc_banks_0_banks_2_rf$ADDR_1),
								.ADDR_IN(rt_ifc_banks_0_banks_2_rf$ADDR_IN),
								.D_IN(rt_ifc_banks_0_banks_2_rf$D_IN),
								.WE(rt_ifc_banks_0_banks_2_rf$WE),
								.D_OUT_1(rt_ifc_banks_0_banks_2_rf$D_OUT_1));

  // submodule rt_ifc_banks_0_banks_3_rf
  RegFileLoadSyn #( /*file*/ "mesh_16RTs_2VCs_4BD_256DW_SepIFRoundRobinAlloc_4RTsPerRow_4RTsPerCol_routing_0.hex",
		    /*addr_width*/ 32'd4,
		    /*data_width*/ 32'd3,
		    /*lo*/ 32'd0,
		    /*hi*/ 32'd15,
		    /*binary*/ 32'd0) rt_ifc_banks_0_banks_3_rf(.CLK(CLK),
								.RST_N(RST_N),
								.ADDR_1(rt_ifc_banks_0_banks_3_rf$ADDR_1),
								.ADDR_IN(rt_ifc_banks_0_banks_3_rf$ADDR_IN),
								.D_IN(rt_ifc_banks_0_banks_3_rf$D_IN),
								.WE(rt_ifc_banks_0_banks_3_rf$WE),
								.D_OUT_1(rt_ifc_banks_0_banks_3_rf$D_OUT_1));

  // submodule rt_ifc_banks_0_banks_4_rf
  RegFileLoadSyn #( /*file*/ "mesh_16RTs_2VCs_4BD_256DW_SepIFRoundRobinAlloc_4RTsPerRow_4RTsPerCol_routing_0.hex",
		    /*addr_width*/ 32'd4,
		    /*data_width*/ 32'd3,
		    /*lo*/ 32'd0,
		    /*hi*/ 32'd15,
		    /*binary*/ 32'd0) rt_ifc_banks_0_banks_4_rf(.CLK(CLK),
								.RST_N(RST_N),
								.ADDR_1(rt_ifc_banks_0_banks_4_rf$ADDR_1),
								.ADDR_IN(rt_ifc_banks_0_banks_4_rf$ADDR_IN),
								.D_IN(rt_ifc_banks_0_banks_4_rf$D_IN),
								.WE(rt_ifc_banks_0_banks_4_rf$WE),
								.D_OUT_1(rt_ifc_banks_0_banks_4_rf$D_OUT_1));

  // submodule rt_ifc_banks_0_banks_0_rf
  assign rt_ifc_banks_0_banks_0_rf$ADDR_1 = r_0_sub_a ;
  assign rt_ifc_banks_0_banks_0_rf$ADDR_IN = w_0_upd_a ;
  assign rt_ifc_banks_0_banks_0_rf$D_IN = w_0_upd_d ;
  assign rt_ifc_banks_0_banks_0_rf$WE = EN_w_0_upd ;

  // submodule rt_ifc_banks_0_banks_1_rf
  assign rt_ifc_banks_0_banks_1_rf$ADDR_1 = r_1_sub_a ;
  assign rt_ifc_banks_0_banks_1_rf$ADDR_IN = w_0_upd_a ;
  assign rt_ifc_banks_0_banks_1_rf$D_IN = w_0_upd_d ;
  assign rt_ifc_banks_0_banks_1_rf$WE = EN_w_0_upd ;

  // submodule rt_ifc_banks_0_banks_2_rf
  assign rt_ifc_banks_0_banks_2_rf$ADDR_1 = r_2_sub_a ;
  assign rt_ifc_banks_0_banks_2_rf$ADDR_IN = w_0_upd_a ;
  assign rt_ifc_banks_0_banks_2_rf$D_IN = w_0_upd_d ;
  assign rt_ifc_banks_0_banks_2_rf$WE = EN_w_0_upd ;

  // submodule rt_ifc_banks_0_banks_3_rf
  assign rt_ifc_banks_0_banks_3_rf$ADDR_1 = r_3_sub_a ;
  assign rt_ifc_banks_0_banks_3_rf$ADDR_IN = w_0_upd_a ;
  assign rt_ifc_banks_0_banks_3_rf$D_IN = w_0_upd_d ;
  assign rt_ifc_banks_0_banks_3_rf$WE = EN_w_0_upd ;

  // submodule rt_ifc_banks_0_banks_4_rf
  assign rt_ifc_banks_0_banks_4_rf$ADDR_1 = r_4_sub_a ;
  assign rt_ifc_banks_0_banks_4_rf$ADDR_IN = w_0_upd_a ;
  assign rt_ifc_banks_0_banks_4_rf$D_IN = w_0_upd_d ;
  assign rt_ifc_banks_0_banks_4_rf$WE = EN_w_0_upd ;
endmodule  // mkRouteTableSynth

