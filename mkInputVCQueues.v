//
// Generated by Bluespec Compiler, version 2025.01.1-9-g76db531e (build 76db531e)
//
// On Thu Jul 31 18:29:09 PDT 2025
//
//
// Ports:
// Name                         I/O  size props
// deq                            O   262
// notEmpty                       O     2 reg
// notFull                        O     2 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// enq_fifo_in                    I     1
// enq_data_in                    I   262
// deq_fifo_out                   I     1
// EN_enq                         I     1
// EN_deq                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkInputVCQueues(CLK,
		       RST_N,

		       enq_fifo_in,
		       enq_data_in,
		       EN_enq,

		       deq_fifo_out,
		       EN_deq,
		       deq,

		       notEmpty,

		       notFull);
  input  CLK;
  input  RST_N;

  // action method enq
  input  enq_fifo_in;
  input  [261 : 0] enq_data_in;
  input  EN_enq;

  // actionvalue method deq
  input  deq_fifo_out;
  input  EN_deq;
  output [261 : 0] deq;

  // value method notEmpty
  output [1 : 0] notEmpty;

  // value method notFull
  output [1 : 0] notFull;

  // signals for module outputs
  wire [261 : 0] deq;
  wire [1 : 0] notEmpty, notFull;

  // inlined wires
  wire [1 : 0] inputVCQueues_ifc_mf_ifc_rdFIFO$wget,
	       inputVCQueues_ifc_mf_ifc_wrFIFO$wget;

  // register inputVCQueues_ifc_mf_ifc_heads_0
  reg [1 : 0] inputVCQueues_ifc_mf_ifc_heads_0;
  wire [1 : 0] inputVCQueues_ifc_mf_ifc_heads_0$D_IN;
  wire inputVCQueues_ifc_mf_ifc_heads_0$EN;

  // register inputVCQueues_ifc_mf_ifc_heads_1
  reg [1 : 0] inputVCQueues_ifc_mf_ifc_heads_1;
  wire [1 : 0] inputVCQueues_ifc_mf_ifc_heads_1$D_IN;
  wire inputVCQueues_ifc_mf_ifc_heads_1$EN;

  // register inputVCQueues_ifc_mf_ifc_not_empty_0
  reg inputVCQueues_ifc_mf_ifc_not_empty_0;
  wire inputVCQueues_ifc_mf_ifc_not_empty_0$D_IN,
       inputVCQueues_ifc_mf_ifc_not_empty_0$EN;

  // register inputVCQueues_ifc_mf_ifc_not_empty_1
  reg inputVCQueues_ifc_mf_ifc_not_empty_1;
  wire inputVCQueues_ifc_mf_ifc_not_empty_1$D_IN,
       inputVCQueues_ifc_mf_ifc_not_empty_1$EN;

  // register inputVCQueues_ifc_mf_ifc_not_full_0
  reg inputVCQueues_ifc_mf_ifc_not_full_0;
  wire inputVCQueues_ifc_mf_ifc_not_full_0$D_IN,
       inputVCQueues_ifc_mf_ifc_not_full_0$EN;

  // register inputVCQueues_ifc_mf_ifc_not_full_1
  reg inputVCQueues_ifc_mf_ifc_not_full_1;
  wire inputVCQueues_ifc_mf_ifc_not_full_1$D_IN,
       inputVCQueues_ifc_mf_ifc_not_full_1$EN;

  // register inputVCQueues_ifc_mf_ifc_tails_0
  reg [1 : 0] inputVCQueues_ifc_mf_ifc_tails_0;
  wire [1 : 0] inputVCQueues_ifc_mf_ifc_tails_0$D_IN;
  wire inputVCQueues_ifc_mf_ifc_tails_0$EN;

  // register inputVCQueues_ifc_mf_ifc_tails_1
  reg [1 : 0] inputVCQueues_ifc_mf_ifc_tails_1;
  wire [1 : 0] inputVCQueues_ifc_mf_ifc_tails_1$D_IN;
  wire inputVCQueues_ifc_mf_ifc_tails_1$EN;

  // ports of submodule inputVCQueues_ifc_mf_ifc_fifoMem
  wire [261 : 0] inputVCQueues_ifc_mf_ifc_fifoMem$D_IN,
		 inputVCQueues_ifc_mf_ifc_fifoMem$D_OUT;
  wire [2 : 0] inputVCQueues_ifc_mf_ifc_fifoMem$ADDR_IN,
	       inputVCQueues_ifc_mf_ifc_fifoMem$ADDR_OUT;
  wire inputVCQueues_ifc_mf_ifc_fifoMem$WE;

  // remaining internal signals
  reg [1 : 0] fifoRdPtr__h3230, new_value__h3098, y__h2195, y__h2576;
  reg CASE_deq_fifo_out_0_inputVCQueues_ifc_mf_ifc_n_ETC__q2,
      CASE_enq_fifo_in_0_inputVCQueues_ifc_mf_ifc_no_ETC__q1,
      SEL_ARR_NOT_inputVCQueues_ifc_mf_ifc_not_full__ETC___d68;
  wire [1 : 0] x__h1620, x__h1847, x_wget__h1046, x_wget__h975;
  wire IF_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_in_ETC___d43,
       IF_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_in_ETC___d44,
       NOT_SEL_ARR_inputVCQueues_ifc_mf_ifc_not_empty_ETC___d82,
       NOT_SEL_ARR_inputVCQueues_ifc_mf_ifc_not_full__ETC___d71,
       NOT_inputVCQueues_ifc_mf_ifc_rdFIFO_whas__4_7__ETC___d41,
       NOT_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_5_OR__ETC___d59,
       _dfoo5,
       _dfoo7,
       inputVCQueues_ifc_mf_ifc_rdFIFO_whas__4_AND_in_ETC___d51,
       inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_input_ETC___d33;

  // actionvalue method deq
  assign deq = inputVCQueues_ifc_mf_ifc_fifoMem$D_OUT ;

  // value method notEmpty
  assign notEmpty =
	     { inputVCQueues_ifc_mf_ifc_not_empty_1,
	       inputVCQueues_ifc_mf_ifc_not_empty_0 } ;

  // value method notFull
  assign notFull =
	     { inputVCQueues_ifc_mf_ifc_not_full_1,
	       inputVCQueues_ifc_mf_ifc_not_full_0 } ;

  // submodule inputVCQueues_ifc_mf_ifc_fifoMem
  RegFile_1port #( /*data_width*/ 32'd262,
		   /*addr_width*/ 32'd3) inputVCQueues_ifc_mf_ifc_fifoMem(.CLK(CLK),
									  .rst_n(RST_N),
									  .ADDR_IN(inputVCQueues_ifc_mf_ifc_fifoMem$ADDR_IN),
									  .ADDR_OUT(inputVCQueues_ifc_mf_ifc_fifoMem$ADDR_OUT),
									  .D_IN(inputVCQueues_ifc_mf_ifc_fifoMem$D_IN),
									  .WE(inputVCQueues_ifc_mf_ifc_fifoMem$WE),
									  .D_OUT(inputVCQueues_ifc_mf_ifc_fifoMem$D_OUT));

  // inlined wires
  assign inputVCQueues_ifc_mf_ifc_wrFIFO$wget = { 1'd1, enq_fifo_in } ;
  assign inputVCQueues_ifc_mf_ifc_rdFIFO$wget = { 1'd1, deq_fifo_out } ;

  // register inputVCQueues_ifc_mf_ifc_heads_0
  assign inputVCQueues_ifc_mf_ifc_heads_0$D_IN = x__h1847 ;
  assign inputVCQueues_ifc_mf_ifc_heads_0$EN =
	     inputVCQueues_ifc_mf_ifc_rdFIFO$wget[0] == 1'd0 && EN_deq &&
	     inputVCQueues_ifc_mf_ifc_rdFIFO$wget[1] ;

  // register inputVCQueues_ifc_mf_ifc_heads_1
  assign inputVCQueues_ifc_mf_ifc_heads_1$D_IN = x__h1847 ;
  assign inputVCQueues_ifc_mf_ifc_heads_1$EN =
	     inputVCQueues_ifc_mf_ifc_rdFIFO$wget[0] == 1'd1 && EN_deq &&
	     inputVCQueues_ifc_mf_ifc_rdFIFO$wget[1] ;

  // register inputVCQueues_ifc_mf_ifc_not_empty_0
  assign inputVCQueues_ifc_mf_ifc_not_empty_0$D_IN =
	     inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0] == 1'd0 &&
	     inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_input_ETC___d33 ;
  assign inputVCQueues_ifc_mf_ifc_not_empty_0$EN = _dfoo7 ;

  // register inputVCQueues_ifc_mf_ifc_not_empty_1
  assign inputVCQueues_ifc_mf_ifc_not_empty_1$D_IN =
	     inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0] == 1'd1 &&
	     inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_input_ETC___d33 ;
  assign inputVCQueues_ifc_mf_ifc_not_empty_1$EN = _dfoo5 ;

  // register inputVCQueues_ifc_mf_ifc_not_full_0
  assign inputVCQueues_ifc_mf_ifc_not_full_0$D_IN =
	     !IF_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_in_ETC___d43 ;
  assign inputVCQueues_ifc_mf_ifc_not_full_0$EN =
	     IF_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_in_ETC___d43 ||
	     inputVCQueues_ifc_mf_ifc_rdFIFO$wget[0] == 1'd0 &&
	     inputVCQueues_ifc_mf_ifc_rdFIFO_whas__4_AND_in_ETC___d51 ;

  // register inputVCQueues_ifc_mf_ifc_not_full_1
  assign inputVCQueues_ifc_mf_ifc_not_full_1$D_IN =
	     !IF_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_in_ETC___d44 ;
  assign inputVCQueues_ifc_mf_ifc_not_full_1$EN =
	     IF_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_in_ETC___d44 ||
	     inputVCQueues_ifc_mf_ifc_rdFIFO$wget[0] == 1'd1 &&
	     inputVCQueues_ifc_mf_ifc_rdFIFO_whas__4_AND_in_ETC___d51 ;

  // register inputVCQueues_ifc_mf_ifc_tails_0
  assign inputVCQueues_ifc_mf_ifc_tails_0$D_IN = x__h1620 ;
  assign inputVCQueues_ifc_mf_ifc_tails_0$EN =
	     inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0] == 1'd0 && EN_enq &&
	     inputVCQueues_ifc_mf_ifc_wrFIFO$wget[1] ;

  // register inputVCQueues_ifc_mf_ifc_tails_1
  assign inputVCQueues_ifc_mf_ifc_tails_1$D_IN = x__h1620 ;
  assign inputVCQueues_ifc_mf_ifc_tails_1$EN =
	     inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0] == 1'd1 && EN_enq &&
	     inputVCQueues_ifc_mf_ifc_wrFIFO$wget[1] ;

  // submodule inputVCQueues_ifc_mf_ifc_fifoMem
  assign inputVCQueues_ifc_mf_ifc_fifoMem$ADDR_IN =
	     { enq_fifo_in, new_value__h3098 } ;
  assign inputVCQueues_ifc_mf_ifc_fifoMem$ADDR_OUT =
	     { deq_fifo_out, fifoRdPtr__h3230 } ;
  assign inputVCQueues_ifc_mf_ifc_fifoMem$D_IN = enq_data_in ;
  assign inputVCQueues_ifc_mf_ifc_fifoMem$WE = EN_enq ;

  // remaining internal signals
  assign IF_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_in_ETC___d43 =
	     inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0] == 1'd0 && EN_enq &&
	     inputVCQueues_ifc_mf_ifc_wrFIFO$wget[1] &&
	     NOT_inputVCQueues_ifc_mf_ifc_rdFIFO_whas__4_7__ETC___d41 ;
  assign IF_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_in_ETC___d44 =
	     inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0] == 1'd1 && EN_enq &&
	     inputVCQueues_ifc_mf_ifc_wrFIFO$wget[1] &&
	     NOT_inputVCQueues_ifc_mf_ifc_rdFIFO_whas__4_7__ETC___d41 ;
  assign NOT_SEL_ARR_inputVCQueues_ifc_mf_ifc_not_empty_ETC___d82 =
	     !CASE_deq_fifo_out_0_inputVCQueues_ifc_mf_ifc_n_ETC__q2 ;
  assign NOT_SEL_ARR_inputVCQueues_ifc_mf_ifc_not_full__ETC___d71 =
	     !CASE_enq_fifo_in_0_inputVCQueues_ifc_mf_ifc_no_ETC__q1 ;
  assign NOT_inputVCQueues_ifc_mf_ifc_rdFIFO_whas__4_7__ETC___d41 =
	     (!EN_deq || !inputVCQueues_ifc_mf_ifc_rdFIFO$wget[1] ||
	      inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0] !=
	      inputVCQueues_ifc_mf_ifc_rdFIFO$wget[0]) &&
	     x__h1620 == y__h2195 ;
  assign NOT_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_5_OR__ETC___d59 =
	     (!EN_enq || !inputVCQueues_ifc_mf_ifc_wrFIFO$wget[1] ||
	      inputVCQueues_ifc_mf_ifc_rdFIFO$wget[0] !=
	      inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0]) &&
	     x__h1847 == y__h2576 ;
  assign _dfoo5 =
	     inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0] == 1'd1 &&
	     inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_input_ETC___d33 ||
	     inputVCQueues_ifc_mf_ifc_rdFIFO$wget[0] == 1'd1 && EN_deq &&
	     inputVCQueues_ifc_mf_ifc_rdFIFO$wget[1] &&
	     NOT_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_5_OR__ETC___d59 ;
  assign _dfoo7 =
	     inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0] == 1'd0 &&
	     inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_input_ETC___d33 ||
	     inputVCQueues_ifc_mf_ifc_rdFIFO$wget[0] == 1'd0 && EN_deq &&
	     inputVCQueues_ifc_mf_ifc_rdFIFO$wget[1] &&
	     NOT_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_5_OR__ETC___d59 ;
  assign inputVCQueues_ifc_mf_ifc_rdFIFO_whas__4_AND_in_ETC___d51 =
	     EN_deq && inputVCQueues_ifc_mf_ifc_rdFIFO$wget[1] &&
	     (!EN_enq || !inputVCQueues_ifc_mf_ifc_wrFIFO$wget[1] ||
	      inputVCQueues_ifc_mf_ifc_rdFIFO$wget[0] !=
	      inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0]) ;
  assign inputVCQueues_ifc_mf_ifc_wrFIFO_whas_AND_input_ETC___d33 =
	     EN_enq && inputVCQueues_ifc_mf_ifc_wrFIFO$wget[1] &&
	     (!EN_deq || !inputVCQueues_ifc_mf_ifc_rdFIFO$wget[1] ||
	      inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0] !=
	      inputVCQueues_ifc_mf_ifc_rdFIFO$wget[0]) ;
  assign x__h1620 = EN_enq ? x_wget__h975 : 2'd0 ;
  assign x__h1847 = EN_deq ? x_wget__h1046 : 2'd0 ;
  assign x_wget__h1046 = fifoRdPtr__h3230 + 2'd1 ;
  assign x_wget__h975 = new_value__h3098 + 2'd1 ;
  always@(enq_fifo_in or
	  inputVCQueues_ifc_mf_ifc_tails_0 or
	  inputVCQueues_ifc_mf_ifc_tails_1)
  begin
    case (enq_fifo_in)
      1'd0: new_value__h3098 = inputVCQueues_ifc_mf_ifc_tails_0;
      1'd1: new_value__h3098 = inputVCQueues_ifc_mf_ifc_tails_1;
    endcase
  end
  always@(deq_fifo_out or
	  inputVCQueues_ifc_mf_ifc_heads_0 or
	  inputVCQueues_ifc_mf_ifc_heads_1)
  begin
    case (deq_fifo_out)
      1'd0: fifoRdPtr__h3230 = inputVCQueues_ifc_mf_ifc_heads_0;
      1'd1: fifoRdPtr__h3230 = inputVCQueues_ifc_mf_ifc_heads_1;
    endcase
  end
  always@(enq_fifo_in or
	  inputVCQueues_ifc_mf_ifc_not_full_0 or
	  inputVCQueues_ifc_mf_ifc_not_full_1)
  begin
    case (enq_fifo_in)
      1'd0:
	  SEL_ARR_NOT_inputVCQueues_ifc_mf_ifc_not_full__ETC___d68 =
	      !inputVCQueues_ifc_mf_ifc_not_full_0;
      1'd1:
	  SEL_ARR_NOT_inputVCQueues_ifc_mf_ifc_not_full__ETC___d68 =
	      !inputVCQueues_ifc_mf_ifc_not_full_1;
    endcase
  end
  always@(enq_fifo_in or
	  inputVCQueues_ifc_mf_ifc_not_full_0 or
	  inputVCQueues_ifc_mf_ifc_not_full_1)
  begin
    case (enq_fifo_in)
      1'd0:
	  CASE_enq_fifo_in_0_inputVCQueues_ifc_mf_ifc_no_ETC__q1 =
	      inputVCQueues_ifc_mf_ifc_not_full_0;
      1'd1:
	  CASE_enq_fifo_in_0_inputVCQueues_ifc_mf_ifc_no_ETC__q1 =
	      inputVCQueues_ifc_mf_ifc_not_full_1;
    endcase
  end
  always@(deq_fifo_out or
	  inputVCQueues_ifc_mf_ifc_not_empty_0 or
	  inputVCQueues_ifc_mf_ifc_not_empty_1)
  begin
    case (deq_fifo_out)
      1'd0:
	  CASE_deq_fifo_out_0_inputVCQueues_ifc_mf_ifc_n_ETC__q2 =
	      inputVCQueues_ifc_mf_ifc_not_empty_0;
      1'd1:
	  CASE_deq_fifo_out_0_inputVCQueues_ifc_mf_ifc_n_ETC__q2 =
	      inputVCQueues_ifc_mf_ifc_not_empty_1;
    endcase
  end
  always@(inputVCQueues_ifc_mf_ifc_wrFIFO$wget or
	  inputVCQueues_ifc_mf_ifc_heads_0 or
	  inputVCQueues_ifc_mf_ifc_heads_1)
  begin
    case (inputVCQueues_ifc_mf_ifc_wrFIFO$wget[0])
      1'd0: y__h2195 = inputVCQueues_ifc_mf_ifc_heads_0;
      1'd1: y__h2195 = inputVCQueues_ifc_mf_ifc_heads_1;
    endcase
  end
  always@(inputVCQueues_ifc_mf_ifc_rdFIFO$wget or
	  inputVCQueues_ifc_mf_ifc_tails_0 or
	  inputVCQueues_ifc_mf_ifc_tails_1)
  begin
    case (inputVCQueues_ifc_mf_ifc_rdFIFO$wget[0])
      1'd0: y__h2576 = inputVCQueues_ifc_mf_ifc_tails_0;
      1'd1: y__h2576 = inputVCQueues_ifc_mf_ifc_tails_1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inputVCQueues_ifc_mf_ifc_heads_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inputVCQueues_ifc_mf_ifc_heads_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inputVCQueues_ifc_mf_ifc_not_empty_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inputVCQueues_ifc_mf_ifc_not_empty_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inputVCQueues_ifc_mf_ifc_not_full_0 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inputVCQueues_ifc_mf_ifc_not_full_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inputVCQueues_ifc_mf_ifc_tails_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inputVCQueues_ifc_mf_ifc_tails_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (inputVCQueues_ifc_mf_ifc_heads_0$EN)
	  inputVCQueues_ifc_mf_ifc_heads_0 <= `BSV_ASSIGNMENT_DELAY
	      inputVCQueues_ifc_mf_ifc_heads_0$D_IN;
	if (inputVCQueues_ifc_mf_ifc_heads_1$EN)
	  inputVCQueues_ifc_mf_ifc_heads_1 <= `BSV_ASSIGNMENT_DELAY
	      inputVCQueues_ifc_mf_ifc_heads_1$D_IN;
	if (inputVCQueues_ifc_mf_ifc_not_empty_0$EN)
	  inputVCQueues_ifc_mf_ifc_not_empty_0 <= `BSV_ASSIGNMENT_DELAY
	      inputVCQueues_ifc_mf_ifc_not_empty_0$D_IN;
	if (inputVCQueues_ifc_mf_ifc_not_empty_1$EN)
	  inputVCQueues_ifc_mf_ifc_not_empty_1 <= `BSV_ASSIGNMENT_DELAY
	      inputVCQueues_ifc_mf_ifc_not_empty_1$D_IN;
	if (inputVCQueues_ifc_mf_ifc_not_full_0$EN)
	  inputVCQueues_ifc_mf_ifc_not_full_0 <= `BSV_ASSIGNMENT_DELAY
	      inputVCQueues_ifc_mf_ifc_not_full_0$D_IN;
	if (inputVCQueues_ifc_mf_ifc_not_full_1$EN)
	  inputVCQueues_ifc_mf_ifc_not_full_1 <= `BSV_ASSIGNMENT_DELAY
	      inputVCQueues_ifc_mf_ifc_not_full_1$D_IN;
	if (inputVCQueues_ifc_mf_ifc_tails_0$EN)
	  inputVCQueues_ifc_mf_ifc_tails_0 <= `BSV_ASSIGNMENT_DELAY
	      inputVCQueues_ifc_mf_ifc_tails_0$D_IN;
	if (inputVCQueues_ifc_mf_ifc_tails_1$EN)
	  inputVCQueues_ifc_mf_ifc_tails_1 <= `BSV_ASSIGNMENT_DELAY
	      inputVCQueues_ifc_mf_ifc_tails_1$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inputVCQueues_ifc_mf_ifc_heads_0 = 2'h2;
    inputVCQueues_ifc_mf_ifc_heads_1 = 2'h2;
    inputVCQueues_ifc_mf_ifc_not_empty_0 = 1'h0;
    inputVCQueues_ifc_mf_ifc_not_empty_1 = 1'h0;
    inputVCQueues_ifc_mf_ifc_not_full_0 = 1'h0;
    inputVCQueues_ifc_mf_ifc_not_full_1 = 1'h0;
    inputVCQueues_ifc_mf_ifc_tails_0 = 2'h2;
    inputVCQueues_ifc_mf_ifc_tails_1 = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_enq && SEL_ARR_NOT_inputVCQueues_ifc_mf_ifc_not_full__ETC___d68)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_enq && SEL_ARR_NOT_inputVCQueues_ifc_mf_ifc_not_full__ETC___d68)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_enq && NOT_SEL_ARR_inputVCQueues_ifc_mf_ifc_not_full__ETC___d71)
	$display("Dynamic assertion failed: \"MultiFIFOMem.bsv\", line 156, column 38\nEnqueing to full FIFO in MultiFIFOMem!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_enq && NOT_SEL_ARR_inputVCQueues_ifc_mf_ifc_not_full__ETC___d71)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE) if (EN_enq) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_deq && NOT_SEL_ARR_inputVCQueues_ifc_mf_ifc_not_empty_ETC___d82)
	$display("Dynamic assertion failed: \"MultiFIFOMem.bsv\", line 190, column 40\nDequeing from empty FIFO in MultiFIFOMem!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_deq && NOT_SEL_ARR_inputVCQueues_ifc_mf_ifc_not_empty_ETC___d82)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE) if (EN_deq) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_enq && inputVCQueues_ifc_mf_ifc_wrFIFO$wget[1] &&
	  NOT_inputVCQueues_ifc_mf_ifc_rdFIFO_whas__4_7__ETC___d41)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_deq && inputVCQueues_ifc_mf_ifc_rdFIFO$wget[1] &&
	  NOT_inputVCQueues_ifc_mf_ifc_wrFIFO_whas_5_OR__ETC___d59)
	$write("");
  end
  // synopsys translate_on
endmodule  // mkInputVCQueues

