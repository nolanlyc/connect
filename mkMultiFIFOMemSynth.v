//
// Generated by Bluespec Compiler, version 2025.01.1-9-g76db531e (build 76db531e)
//
// On Thu Jul 31 18:29:06 PDT 2025
//
//
// Ports:
// Name                         I/O  size props
// deq                            O   128
// notEmpty                       O     1 reg
// notFull                        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// enq_data_in                    I   128
// EN_enq                         I     1
// EN_deq                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMultiFIFOMemSynth(CLK,
			   RST_N,

			   enq_data_in,
			   EN_enq,

			   EN_deq,
			   deq,

			   notEmpty,

			   notFull);
  input  CLK;
  input  RST_N;

  // action method enq
  input  [127 : 0] enq_data_in;
  input  EN_enq;

  // actionvalue method deq
  input  EN_deq;
  output [127 : 0] deq;

  // value method notEmpty
  output notEmpty;

  // value method notFull
  output notFull;

  // signals for module outputs
  wire [127 : 0] deq;
  wire notEmpty, notFull;

  // register mf_mf_ifc_heads_0
  reg [1 : 0] mf_mf_ifc_heads_0;
  wire [1 : 0] mf_mf_ifc_heads_0$D_IN;
  wire mf_mf_ifc_heads_0$EN;

  // register mf_mf_ifc_not_empty_0
  reg mf_mf_ifc_not_empty_0;
  wire mf_mf_ifc_not_empty_0$D_IN, mf_mf_ifc_not_empty_0$EN;

  // register mf_mf_ifc_not_full_0
  reg mf_mf_ifc_not_full_0;
  wire mf_mf_ifc_not_full_0$D_IN, mf_mf_ifc_not_full_0$EN;

  // register mf_mf_ifc_tails_0
  reg [1 : 0] mf_mf_ifc_tails_0;
  wire [1 : 0] mf_mf_ifc_tails_0$D_IN;
  wire mf_mf_ifc_tails_0$EN;

  // ports of submodule mf_mf_ifc_fifoMem
  wire [127 : 0] mf_mf_ifc_fifoMem$D_IN, mf_mf_ifc_fifoMem$D_OUT;
  wire [1 : 0] mf_mf_ifc_fifoMem$ADDR_IN, mf_mf_ifc_fifoMem$ADDR_OUT;
  wire mf_mf_ifc_fifoMem$WE;

  // remaining internal signals
  wire [1 : 0] x__h1354, x__h1530, x_wget__h738, x_wget__h809;
  wire mf_mf_ifc_rdFIFO_whas_AND_mf_mf_ifc_rdFIFO_wge_ETC___d28,
       mf_mf_ifc_wrFIFO_whas_AND_mf_mf_ifc_wrFIFO_wge_ETC___d20;

  // actionvalue method deq
  assign deq = mf_mf_ifc_fifoMem$D_OUT ;

  // value method notEmpty
  assign notEmpty = mf_mf_ifc_not_empty_0 ;

  // value method notFull
  assign notFull = mf_mf_ifc_not_full_0 ;

  // submodule mf_mf_ifc_fifoMem
  RegFile_1port #( /*data_width*/ 32'd128,
		   /*addr_width*/ 32'd2) mf_mf_ifc_fifoMem(.CLK(CLK),
							   .rst_n(RST_N),
							   .ADDR_IN(mf_mf_ifc_fifoMem$ADDR_IN),
							   .ADDR_OUT(mf_mf_ifc_fifoMem$ADDR_OUT),
							   .D_IN(mf_mf_ifc_fifoMem$D_IN),
							   .WE(mf_mf_ifc_fifoMem$WE),
							   .D_OUT(mf_mf_ifc_fifoMem$D_OUT));

  // register mf_mf_ifc_heads_0
  assign mf_mf_ifc_heads_0$D_IN = x__h1530 ;
  assign mf_mf_ifc_heads_0$EN = EN_deq ;

  // register mf_mf_ifc_not_empty_0
  assign mf_mf_ifc_not_empty_0$D_IN = EN_enq && !EN_deq ;
  assign mf_mf_ifc_not_empty_0$EN =
	     EN_enq && !EN_deq ||
	     mf_mf_ifc_rdFIFO_whas_AND_mf_mf_ifc_rdFIFO_wge_ETC___d28 ;

  // register mf_mf_ifc_not_full_0
  assign mf_mf_ifc_not_full_0$D_IN =
	     !mf_mf_ifc_wrFIFO_whas_AND_mf_mf_ifc_wrFIFO_wge_ETC___d20 ;
  assign mf_mf_ifc_not_full_0$EN =
	     mf_mf_ifc_wrFIFO_whas_AND_mf_mf_ifc_wrFIFO_wge_ETC___d20 ||
	     EN_deq && !EN_enq ;

  // register mf_mf_ifc_tails_0
  assign mf_mf_ifc_tails_0$D_IN = x__h1354 ;
  assign mf_mf_ifc_tails_0$EN = EN_enq ;

  // submodule mf_mf_ifc_fifoMem
  assign mf_mf_ifc_fifoMem$ADDR_IN = mf_mf_ifc_tails_0 ;
  assign mf_mf_ifc_fifoMem$ADDR_OUT = mf_mf_ifc_heads_0 ;
  assign mf_mf_ifc_fifoMem$D_IN = enq_data_in ;
  assign mf_mf_ifc_fifoMem$WE = EN_enq ;

  // remaining internal signals
  assign mf_mf_ifc_rdFIFO_whas_AND_mf_mf_ifc_rdFIFO_wge_ETC___d28 =
	     EN_deq && !EN_enq && x__h1530 == mf_mf_ifc_tails_0 ;
  assign mf_mf_ifc_wrFIFO_whas_AND_mf_mf_ifc_wrFIFO_wge_ETC___d20 =
	     EN_enq && !EN_deq && x__h1354 == mf_mf_ifc_heads_0 ;
  assign x__h1354 = EN_enq ? x_wget__h738 : 2'd0 ;
  assign x__h1530 = EN_deq ? x_wget__h809 : 2'd0 ;
  assign x_wget__h738 = mf_mf_ifc_tails_0 + 2'd1 ;
  assign x_wget__h809 = mf_mf_ifc_heads_0 + 2'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        mf_mf_ifc_heads_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	mf_mf_ifc_not_empty_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mf_mf_ifc_not_full_0 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mf_mf_ifc_tails_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (mf_mf_ifc_heads_0$EN)
	  mf_mf_ifc_heads_0 <= `BSV_ASSIGNMENT_DELAY mf_mf_ifc_heads_0$D_IN;
	if (mf_mf_ifc_not_empty_0$EN)
	  mf_mf_ifc_not_empty_0 <= `BSV_ASSIGNMENT_DELAY
	      mf_mf_ifc_not_empty_0$D_IN;
	if (mf_mf_ifc_not_full_0$EN)
	  mf_mf_ifc_not_full_0 <= `BSV_ASSIGNMENT_DELAY
	      mf_mf_ifc_not_full_0$D_IN;
	if (mf_mf_ifc_tails_0$EN)
	  mf_mf_ifc_tails_0 <= `BSV_ASSIGNMENT_DELAY mf_mf_ifc_tails_0$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    mf_mf_ifc_heads_0 = 2'h2;
    mf_mf_ifc_not_empty_0 = 1'h0;
    mf_mf_ifc_not_full_0 = 1'h0;
    mf_mf_ifc_tails_0 = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_enq && !mf_mf_ifc_not_full_0) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_enq && !mf_mf_ifc_not_full_0) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_enq && !mf_mf_ifc_not_full_0)
	$display("Dynamic assertion failed: \"MultiFIFOMem.bsv\", line 156, column 38\nEnqueing to full FIFO in MultiFIFOMem!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_enq && !mf_mf_ifc_not_full_0) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE) if (EN_enq) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_deq && !mf_mf_ifc_not_empty_0)
	$display("Dynamic assertion failed: \"MultiFIFOMem.bsv\", line 190, column 40\nDequeing from empty FIFO in MultiFIFOMem!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_deq && !mf_mf_ifc_not_empty_0) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE) if (EN_deq) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (mf_mf_ifc_wrFIFO_whas_AND_mf_mf_ifc_wrFIFO_wge_ETC___d20)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (mf_mf_ifc_rdFIFO_whas_AND_mf_mf_ifc_rdFIFO_wge_ETC___d28)
	$write("");
  end
  // synopsys translate_on
endmodule  // mkMultiFIFOMemSynth

