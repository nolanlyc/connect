//
// Generated by Bluespec Compiler, version 2025.01.1-9-g76db531e (build 76db531e)
//
// On Mon Jul 28 19:05:17 PDT 2025
//
//
// Ports:
// Name                         I/O  size props
// select                         O     5
// CLK                            I     1 clock
// RST_N                          I     1 reset
// select_requests                I     5
// EN_next                        I     1
//
// Combinational paths from inputs to outputs:
//   select_requests -> select
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkInputArbiter(CLK,
		      RST_N,

		      select_requests,
		      select,

		      EN_next);
  input  CLK;
  input  RST_N;

  // value method select
  input  [4 : 0] select_requests;
  output [4 : 0] select;

  // action method next
  input  EN_next;

  // signals for module outputs
  wire [4 : 0] select;

  // register arb_token
  reg [4 : 0] arb_token;
  wire [4 : 0] arb_token$D_IN;
  wire arb_token$EN;

  // remaining internal signals
  wire [1 : 0] gen_grant_carry___d12,
	       gen_grant_carry___d16,
	       gen_grant_carry___d20,
	       gen_grant_carry___d23,
	       gen_grant_carry___d25,
	       gen_grant_carry___d27,
	       gen_grant_carry___d29,
	       gen_grant_carry___d31,
	       gen_grant_carry___d4,
	       gen_grant_carry___d8;
  wire NOT_gen_grant_carry_0_BIT_1_1_4_AND_NOT_gen_gr_ETC___d48,
       NOT_gen_grant_carry_0_BIT_1_1_4_AND_NOT_gen_gr_ETC___d68,
       NOT_gen_grant_carry_2_BIT_1_4_0_AND_NOT_gen_gr_ETC___d66,
       NOT_gen_grant_carry_6_BIT_1_7_1_AND_NOT_gen_gr_ETC___d57,
       arb_token_BIT_0___h1637,
       arb_token_BIT_1___h1703,
       arb_token_BIT_2___h1769,
       arb_token_BIT_3___h1835,
       arb_token_BIT_4___h1901;

  // value method select
  assign select =
	     { gen_grant_carry___d20[1] || gen_grant_carry___d31[1],
	       !gen_grant_carry___d20[1] && !gen_grant_carry___d31[1] &&
	       (gen_grant_carry___d16[1] || gen_grant_carry___d29[1]),
	       NOT_gen_grant_carry_0_BIT_1_1_4_AND_NOT_gen_gr_ETC___d48,
	       !gen_grant_carry___d20[1] && !gen_grant_carry___d31[1] &&
	       NOT_gen_grant_carry_6_BIT_1_7_1_AND_NOT_gen_gr_ETC___d57,
	       NOT_gen_grant_carry_0_BIT_1_1_4_AND_NOT_gen_gr_ETC___d68 } ;

  // register arb_token
  assign arb_token$D_IN = { arb_token[0], arb_token[4:1] } ;
  assign arb_token$EN = EN_next ;

  // remaining internal signals
  module_gen_grant_carry instance_gen_grant_carry_9(.gen_grant_carry_c(1'd0),
						    .gen_grant_carry_r(select_requests[0]),
						    .gen_grant_carry_p(arb_token_BIT_0___h1637),
						    .gen_grant_carry(gen_grant_carry___d4));
  module_gen_grant_carry instance_gen_grant_carry_1(.gen_grant_carry_c(gen_grant_carry___d4[0]),
						    .gen_grant_carry_r(select_requests[1]),
						    .gen_grant_carry_p(arb_token_BIT_1___h1703),
						    .gen_grant_carry(gen_grant_carry___d8));
  module_gen_grant_carry instance_gen_grant_carry_0(.gen_grant_carry_c(gen_grant_carry___d8[0]),
						    .gen_grant_carry_r(select_requests[2]),
						    .gen_grant_carry_p(arb_token_BIT_2___h1769),
						    .gen_grant_carry(gen_grant_carry___d12));
  module_gen_grant_carry instance_gen_grant_carry_2(.gen_grant_carry_c(gen_grant_carry___d12[0]),
						    .gen_grant_carry_r(select_requests[3]),
						    .gen_grant_carry_p(arb_token_BIT_3___h1835),
						    .gen_grant_carry(gen_grant_carry___d16));
  module_gen_grant_carry instance_gen_grant_carry_3(.gen_grant_carry_c(gen_grant_carry___d16[0]),
						    .gen_grant_carry_r(select_requests[4]),
						    .gen_grant_carry_p(arb_token_BIT_4___h1901),
						    .gen_grant_carry(gen_grant_carry___d20));
  module_gen_grant_carry instance_gen_grant_carry_4(.gen_grant_carry_c(gen_grant_carry___d20[0]),
						    .gen_grant_carry_r(select_requests[0]),
						    .gen_grant_carry_p(arb_token_BIT_0___h1637),
						    .gen_grant_carry(gen_grant_carry___d23));
  module_gen_grant_carry instance_gen_grant_carry_5(.gen_grant_carry_c(gen_grant_carry___d23[0]),
						    .gen_grant_carry_r(select_requests[1]),
						    .gen_grant_carry_p(arb_token_BIT_1___h1703),
						    .gen_grant_carry(gen_grant_carry___d25));
  module_gen_grant_carry instance_gen_grant_carry_6(.gen_grant_carry_c(gen_grant_carry___d25[0]),
						    .gen_grant_carry_r(select_requests[2]),
						    .gen_grant_carry_p(arb_token_BIT_2___h1769),
						    .gen_grant_carry(gen_grant_carry___d27));
  module_gen_grant_carry instance_gen_grant_carry_7(.gen_grant_carry_c(gen_grant_carry___d27[0]),
						    .gen_grant_carry_r(select_requests[3]),
						    .gen_grant_carry_p(arb_token_BIT_3___h1835),
						    .gen_grant_carry(gen_grant_carry___d29));
  module_gen_grant_carry instance_gen_grant_carry_8(.gen_grant_carry_c(gen_grant_carry___d29[0]),
						    .gen_grant_carry_r(select_requests[4]),
						    .gen_grant_carry_p(arb_token_BIT_4___h1901),
						    .gen_grant_carry(gen_grant_carry___d31));
  assign NOT_gen_grant_carry_0_BIT_1_1_4_AND_NOT_gen_gr_ETC___d48 =
	     !gen_grant_carry___d20[1] && !gen_grant_carry___d31[1] &&
	     !gen_grant_carry___d16[1] &&
	     !gen_grant_carry___d29[1] &&
	     (gen_grant_carry___d12[1] || gen_grant_carry___d27[1]) ;
  assign NOT_gen_grant_carry_0_BIT_1_1_4_AND_NOT_gen_gr_ETC___d68 =
	     !gen_grant_carry___d20[1] && !gen_grant_carry___d31[1] &&
	     !gen_grant_carry___d16[1] &&
	     !gen_grant_carry___d29[1] &&
	     NOT_gen_grant_carry_2_BIT_1_4_0_AND_NOT_gen_gr_ETC___d66 ;
  assign NOT_gen_grant_carry_2_BIT_1_4_0_AND_NOT_gen_gr_ETC___d66 =
	     !gen_grant_carry___d12[1] && !gen_grant_carry___d27[1] &&
	     !gen_grant_carry___d8[1] &&
	     !gen_grant_carry___d25[1] &&
	     (gen_grant_carry___d4[1] || gen_grant_carry___d23[1]) ;
  assign NOT_gen_grant_carry_6_BIT_1_7_1_AND_NOT_gen_gr_ETC___d57 =
	     !gen_grant_carry___d16[1] && !gen_grant_carry___d29[1] &&
	     !gen_grant_carry___d12[1] &&
	     !gen_grant_carry___d27[1] &&
	     (gen_grant_carry___d8[1] || gen_grant_carry___d25[1]) ;
  assign arb_token_BIT_0___h1637 = arb_token[0] ;
  assign arb_token_BIT_1___h1703 = arb_token[1] ;
  assign arb_token_BIT_2___h1769 = arb_token[2] ;
  assign arb_token_BIT_3___h1835 = arb_token[3] ;
  assign arb_token_BIT_4___h1901 = arb_token[4] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        arb_token <= `BSV_ASSIGNMENT_DELAY 5'd1;
      end
    else
      begin
        if (arb_token$EN) arb_token <= `BSV_ASSIGNMENT_DELAY arb_token$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    arb_token = 5'h0A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkInputArbiter

